You are a full-stack AI engineer. My backend is located in the `backend` folder and built using Node.js with Express. It includes user authentication via JWT and routes for employee leave management such as signup, login, leave application, viewing leave requests, and role-based actions for Managers, Directors, and HR.

Now build the complete frontend inside the `frontend` folder using React.jsx with Tailwind CSS for styling. The application should be responsive and elegant. It must include:

1. **Login Page**:
   - Fields: username and password.
   - On login, receive a JWT token from backend.
   - Save the token to local storage and redirect to home.
   - If the user hasnâ€™t set a password yet, redirect to signup page.
   
2. **Signup Page**:
   - Fields: emp_id and password.
   - On submission, call the `/signup` endpoint which sets password.
   - Show success message on completion and redirect to login.

3. **Home Page** (after login):
   - Display user's leave balances and pending leave requests.
   - Show any general announcements or quick links.
   - For Managers,Directors show team members.

4. **Calendar Page**: Only for Managers, Directors
   - Display month/week interactive calendar.
   - Show all team members' leaves.
   - Use color codes for types: Casual, Sick, Floater, LOP.
   - Allow filtering by department or role.
   - Search for employees.
   - for HR show all above for all employees.

5. **Profile Page**:
   - Show user's complete profile fetched.

6. **Apply Leave Page** (employee only):
   - Form fields: leave_id, start_date, end_date, reason.
   - Submit using POST request to backend.

7. **Leave Request History Page** (employee only):
   - Display all leaves applied by employee and their status.

8. **Team Management Pages** (Manager/Director/HR only):
   - View mentees/reportees and their details.
   - View pending leave requests.
   - Approve or reject requests via buttons.

9. **Logout Functionality**:
   - Clear JWT and redirect to login.

Also create:
- `AuthContext` for handling login state. or you can use any other efficient method
- `ProtectedRoute` component to guard private pages.
- Routing using React Router.
- Components using Tailwind for form fields, buttons, layouts.

Read the backend structure to align API requests with the existing routes. Ensure each component has error handling and loading states.
